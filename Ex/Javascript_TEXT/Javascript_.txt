------------------------------------------------------------------------
■1■ Javascript가 무엇인가?
------------------------------------------------------------------------
HTML 언어에 부가되어 웹페이지를 좀 더 동적이고 다양하게 제작할 수 있는 기법을 제공하는 스크립트 언어의 일종이다.
현재 대부분의 웹브라우저에서 자바스크립트 코딩을 읽어 기능을 구현하는 [JAVASCRIPT 엔진]이 탑재되어 있다.
	<참고>V8 => 구글의 크롬 브라우저와 안드로이드 브라우저에 탑재된 자바스크립트 엔진 이름이다.
	<참고> 스크립트 언어의 특징
	-------------------------------------
	혼자 실행되지 못하고 다른 언어에 포함되어 실행된다.
	스크립트 언어 종류 => JSP, ASP, PHP 등
	혼자 실행되는 스크립트 언어는 node.js
------------------------------------------------------------------------
■2■ Javascript의 기능
------------------------------------------------------------------------
입력 양식에 입력/선택된 데이터에 대한 검증을 한다.(=유효성 체크)
태그의 속성값을 입력/수정/삭제하거나 태그 자체의 입력/삭제 작업을 한다. 태그 컨트롤을 할 수 있다.
	<참고>태그 컨트롤은 자바스크립트보다 JQuery를 사용하는게 더 좋다.
AJAX를 통하여 웹서버와의 데이터 통신을 한다.
*	AJAX => 비동기 방식으로 웹서버와 통신한 후 통신 결과물을 현 화면에 반영하는데 사용되는 기술들을 총칭한다.
		[XMLHttpRequest 객체/DOM/자바스크립트/CSS] 기술들을 총칭한다.
*	비동기 방식 => 페이지 이동 없이 웹서버와 통신하는 방식을 말한다.
			예) 네이버에서 키워드 입력하면 관련 검색어 리스트가 자동으로 뜨는 방식 
*	동기 방식 => 페이지를 이동하면서 웹서버와 통신하는 방식
			예) 네이버 지도에서 지도를 밀면 새로운 지도가 나오는 것
------------------------------------------------------------------------
■3■ Javascript의 장점
------------------------------------------------------------------------
Server에서 Client 쪽으로 전달되어 실행이 되므로 Server에 부담을 주지 않는다.
변수, 연산자, 조건문, 반복문, 함수, 객체 등을 사용하여 프로그래밍의 수준에서 처리할 수 있게 한다.
AJAX 기술을 사용하여 간접 DB 연동이 가능하다.
문법이 자바나 C보다 간단하여 학습이 쉽다. 예) 모든 변수의 형식 검사를 하지 않음 등
[보안성], [소스 중요성] 이 없는 역할은 Javascript가 담당하고, 반대인 경우는 서버 쪽 프로그래밍에서 담당한다.
모바일 분야에서도 활용된다.
------------------------------------------------------------------------
■4■ Javascript를 단점
------------------------------------------------------------------------
HTML 소스 코드 안에 포함되어 있기 때문에 소스가 노출된다. 즉 클라이언트가 JAVAscript소스를 볼 수 있다
JAVA, C언어 같은 강력한 기능의 프로그램을 만들 수 없다.
------------------------------------------------------------------------
■5■ Javascript를 부르는 다른 이름은 무엇?
------------------------------------------------------------------------
	Javascript   -> Mozilla Firefox, Google Chrome, Apple Safari, Adobe Acrobat
	JScript	     -> Internet Explorer
	ECMAScript   -> Opera
	JScript.NET  -> .NET
	ActionScript -> Adobe Flash & Flex
------------------------------------------------------------------------
■6■ Javascript는 HTML 안에서 어디에 삽입됩니까?
------------------------------------------------------------------------
script 태그 안에 삽입된다.
<script>자바스크립트 코드</script>
---------------------------------
<script>~</script>의 위치는 자바스크립트안에 함수가 있다면 <head> 태그 안에 위치시키고
			    자바스크립트안에 함수가 없다면 원하는 실행 위치에 삽입한다.



------------------------------------------------------------------------
■7■ 2개 이상의 HTML 안에서 동일한 자바스크립트 코드를 자주 사용할 경우 유지 보수가 힘들다
	자바스크립트코드가 변경되면 모든 HTML을 열어서 자바스크립트코드를 수정해야 한다.
	해결책은?
------------------------------------------------------------------------
자바스크립트 코드를 xxx.js 파일에 저장하고 각 HTML에서 아래처럼 import하면 된다.
절대경로 상대경로 사용 가능.
----------------------------------
<script scr = "xxx.js"></script>
----------------------------------
	xxx.jx 파일안의 모든 자바스크립트 코드를 scipt 안에 삽입하라.
------------------------------------------------------------------------
■8■ 자바스크립트는 프로그래밍 언어이다. 자바스크립트에서 자료형(=데이터의 종류=date type)의 종류가 뭔가?
------------------------------------------------------------------------
	----------------------------------
	(1) 숫자형
	----------------------------------
		정수, 실수 데이터를 말한다.
	----------------------------------
	(2) 문자형
	----------------------------------
		문자 데이터를 말한다.
		"로 문자를 감싼다.<참고>'로 감싸도 되지만 되도록 "로 문자를 감싼다.
		"" 또는 '' 길이가 없는 문자 데이터이다.
	----------------------------------
	(3) boolean형
	----------------------------------
		true 또는 false 데이터를 말한다. 진실이냐 거짓이냐를 표현한다.
	----------------------------------
	(4) 함수형 
	----------------------------------
		function(매개변수){실행구문;}의 형태 데이터를 말한다.
		function(매개변수){실행구문;}의 형태를 익명함수라고 부른다.
		예) var doubleNum = funcion(num){return num*num;};
	----------------------------------
	(5) 객체형
	----------------------------------
		객체가 차지하는 메모리 공간의 위치 주소값을 말한다.
		객체가 차지하는 메모리 공간의 위치 주소값을 알면 객체가 소유한 속성변수나 메소드를 호출할 수 있다.
		객체 생성의 목적은 메소드나 속성변수 호출
	
	var today = new Date();
	today 라는 변수선언
	Date 객체를 생성해서 메모리에 올린다
	객체의 메모리위치주소값을 리턴한다
	객체의 메모리위치주소값을 today 변수에 저장하기
	----------------------------------
	(6) undefined 형
	----------------------------------
	알 수 없는 데이터를 말한다. 즉 프로그램에서 사용할 수 없는 데이터를 말한다.
	위 5가지 자료형 이외의 자료형을 말한다.	
------------------------------------------------------------------------
■9■ 자바스크립트에서 변수 선언은 어떻게 하나?
------------------------------------------------------------------------
	변수 정의 => 데이터가 저장되는 [메모리의 기억장소]에 붙인 이름을 말한다.
		     <비유> 음식을 담는 그릇과 동일한 개념
	변수 사용 이유 => 데이터를 변수에 저장함으로서 재사용이 가능하다.		     
			  데이터를 변수에 저장하지 않으면 데이터를 재사용 할 수 없다.
	변수 선언 형식 => var 변수명 = 데이터;
	변수명 제작 규칙
	----------------------------------
	변수 이름은 [영문], [숫자],  _ , $ 로 만 구성된다. 단, 영문 중 예약어 (var, if 등)은 불가능하다.
	<주의>변수명의 중간에 공백이 있으면 안 된다. <참고>영문 대신 한글,일어,한자 등 도 가능하나 영문을 사용한다.
	변수명의 첫 글자로 숫자가 올 수는 없다.
	변수명은 영문 대, 소문자를 구별한다.
	관용적 변수명 제작 규칙
		영문, 숫자, _ 로 구성한다.
		변수명의 첫 글자는 영문으로 시작한다.
		3자 이상으로 제작한다.
		변수명을 보고 저장되는 데이터의 종류를 알 수 있도록 의미 있게 준다. (=가독성 있게 준다)
		변수명 사용 불가능 예 =>(숫자먼저)273alpha, (공백)has space		    
		 	             =>(예약어 키워드들)break, else, instanceof, true, case, false, new, try, catch, finally, null. typeof, continue, for, return, var, default, function, switch 등
------------------------------------------------------------------------
■10■ 자바스크립트에서 변수의 종류는 뭐가 있나?
------------------------------------------------------------------------	
----------------------------------
전역변수
	하나의 HTML 파일 안의 모든 자바스크립트에서 공유 가능한 변수다.
	주로 함수 밖에서 var를 붙이거나 var없이 선언된 변수다.
----------------------------------
지역변수
	함수 안에서 var로 선언되어 함수 안에서만 사용되는 변수다.
	<주의>함수 안에서 var 없이 선언된 변수는 함수 밖에서도 호출 가능한 전역변수가 된다.
	예) function getTot(){var base = 80; ~ }
----------------------------------
매개변수
	함수 호출 시 전달되는 데이터를 저장하는 변수다.
	함수 안에서만 사용 가능한 지역변수이다.
	----------------------------------
	예) function 함수명(매개변수){실행구문;}
	----------------------------------
	function getTot(kor){~}
	
----------------------------------
------------------------------------------------------------------------
■11■ 자바스크립트에서 함수(=function)가 무엇인가?
------------------------------------------------------------------------
[실행구문영역]에 이름을 붙여 선언한 후 필요 시점에 이름을 호출하여 [실행구문]을 실행하는 일종의 [단위 프로그램]이다.
반복 사용하는 실행구문을 함수로 만들어놓으면 보관이 용이하고, 언제든지 쉽게 호출하여 사용할 수 있다.
<참고>함수 보다 더 조직적인 [단위 프로그램은] [객체]이다.
------------------------------------------------------------------------
■12■ 함수(=function)의 종류에는 무엇있나?
------------------------------------------------------------------------
정적 함수(선언적함수)
	[함수명]을 붙여 선언하는 함수
	----------------------------------
	정적 함수의 형태
		function 함수명(매개변수){
			실행구문;
			[return [반환값];
		}
	대괄호는 생략이 가능하다는 의미이다.
	매개변수는 0개 이상 나올 수 있음. 2개 이상이라면 ,로 나열함
	매개변수 왼쪽에 var 있으면 안된다.
	----------------------------------
	함수명은 변수명 제작 규칙과 동일하다.
	<주의>함수명 호출 시 함수명 철자와 대소문자가 일치해야한다.
	[매개변수]가 있을 경우 함수 호출 시 매개변수 개수와 자료형에 맞게 데이터를 전달하여 함수를 호출한다.
	함수 안에 return 반환값; 이 나오면 함수를 중단하고 함수를 호출한 곳으로 [반환값]을 리턴한다. 
	함수 안에 return; 이 나오면 함수를 중단만 한다.
	<주의> 동일한 이름의 정적 함수가 2개 이상 선언되면 마지막 정적 함수가 진짜 정적함수다.
----------------------------------
익명 함수
	[함수명] 없이 선언하는 함수로, 주로 변수에 저장한다. 데이터의 한 종류이다.
	----------------------------------
	익명 함수의 형태
		function (매개변수){
			실행구문;
			[return [반환값];
		}
	대괄호는 생략이 가능하다는 의미이다.
	매개변수는 0개 이상 나올 수 있음. 2개 이상이라면 ,로 나열함
	매개변수 왼쪽에 var 있으면 안된다.
	----------------------------------
----------------------------------
내장 함수
	자주 사용되는 기능을 가진 미리 만들어져 제공하는 함수
	예) alert("")
----------------------------------
사용자 정의함수
	개발자가 만들어 사용하는 함수
----------------------------------
내부 함수
	함수 내부에 선언된 또 다른 함수.
----------------------------------
콜백 함수(callback function)(입사문제)
	나중에 필요시 호출해서 사용하라고 전달해 주는 함수를 말한다.
------------------------------------------------------------------------
■13■ 내장 함수의 종류에는 무엇이 있나?
------------------------------------------------------------------------
***** alert("문자열")
	확인 버튼이 있는 [경고상자]를 보여 준다.
	뒤의 내용을 못 누르기 때문에 노달리스?라고 한다 참고
----------------------------------
confirm("문자열")
	확인 버튼과 취소 버튼이 있는 [경고상자]를 보여준다.
	[확인상자]를 보여주고 [확인] 버튼 누르면 true 리턴, [취소] 버튼 누르면 false 리턴
----------------------------------
prompt("문자열")
	[문자열입력상자]와 확인, 취소 버튼이 있는 상자를 보여주고 [확인]버튼 누르면 입력문자열 리턴.
----------------------------------
**** parseInt(숫자문자, 10)
	10진수로 표현된 [숫자문자]를 [정수]로 리턴.
	<참고>[숫자문자]가 실수인 경우 소수 첫째자리부터 모두 버림.
----------------------------------
** Number(데이터)
	데이터가 [숫자] 또는 [숫자문자]면 숫자 리턴 아니면 NaN리턴.
	<주의>함수 이름이 대문자이다.
----------------------------------
isNaN(데이터)
	데이터가 [순수문자]면 true리턴, [숫자] 또는 [숫자문자] false리턴.
	<참고> NaN => Not a Number
----------------------------------
*** setInterval("자바스크립트코딩", n초x1000)
*** setInterval(function(~){자바스크립트코딩;}, n초x1000)
	정해진 시간마다 자바스크립트코딩을 호출
	N초마다 자바스크립트코딩을 반복 실행한다. <주의> "자바스크립트코딩"에서 "를 빼면 안된다.
	익명함수 function(~){자바스크립트코딩;}는 n초마다 호출하고 있으므로 콜백함수이다.
----------------------------------
**** setTimeout("자스코딩", n초x1000)
**** setTimeout(function(~){자바스크립트코딩;}n초x1000)
	N초 후에 자바스크립트코딩을 실행한다. 카운트 다운과 유사.
		익명함수 function(~){자바스크립트코딩;}는 n초마다 호출하고 있으므로 콜백함수이다.
----------------------------------
*** typeof(데이터)
	데이터의 자료형을 문자열로 리턴.
	예) typeof(3) 			=> "number" 리턴
	    typeof("햄버거") 		=> "string" 리턴
	    typeof(function(){~}	=> "function" 리턴
	    typeof(new Date())  	=> "object" 리턴
	    typeof(var xxx; typeof(xxx) => "undefined" 리턴
----------------------------------
eval("문자열")
	문자열을 자바스크립트 실행 코드로 바꾸어 실행한다.
----------------------------------
기타 등

------------------------------------------------------------------------
■14■ 객체(Object)란?
------------------------------------------------------------------------
[메모리]공간에 존재하는 [단위 프로그램]으로 [메소드]와 [속성변수(=프로퍼티)]로 구성 되어있다.
	----------------------------------
	속성변수(=property)
		메소드 안에서 사용할 데이터를 저장하고 있다.
	----------------------------------
	메소드(=method)
		실행구문이 저장되어 있다.
		메소드명 호출 시 지정한 실행구문이 실행되며 경우에 따라 호출 후 리턴 값이 있을 수 있다.
		메소드는 결국 함수와 동일하다. 즉 함수가 객체안에서는 메소드로 불리운다.
	----------------------------------
[객체]의 [속성변수]를 호출하여 저장된 데이터를 얻거나 저장할 수 있고,
[메소드]를 호출함으로써 특정 실행구문을 반복 실행할 수 있다.
------------------------------------------------------------------------
■15■ 자바스크립트에서 사용 가능한 객체 종류에는 무엇이 있나?
------------------------------------------------------------------------
----------------------------------
DOM(=Document Object Model) 객체
----------------------------------
	W3C 라는 단체가 [여러 브라우저 제작사]들과 협력하여 제작한 객체이다.
	대부분의 브라우저에서 공용으로 사용가능한 객체이다.
	----------------------------------
	DOM객체의 기능
		HTML [태그]의 각종 정보를 소유하고, [태그]에 대응하는 [컨텐츠]를 [웹브라우저 화면]에 출력한다.
	----------------------------------
	<참고> W3C => 웹을 위한 표준을 연구/개발하고 정리하는 단체이다.
	----------------------------------
	DOM 객체에 대한 설명
		xxx.html 파일 안에 <input type="text" name ="uid">라는 태그가 있다면
		웹브라우저가 이 태그를 읽어들이면서 다음과 같은 진행을 갖는다.
		(1) 웹브라우저가 <input type="text" name ="uid">를 읽는다.
		(2) Text 객체 생성된다. Text 객체의 속성변수에는 name, type, value 등등이 있다.
					name 속성변수에는 문자 "uid"가 저장되어 있고
					type 속성변수에는 문자 "text"가 저장되어 있다.
		(3) Text 객체에 대응하는 입력양식이 웹브라우저에 출력된다.
					value 속성변수에는 유저가 입력한 데이터가 저장되어 있다.
		(4) 웹브라우저에서 입력양식에 데이터를 입력하면 Text객체의 value 속성변수에 입력한 데이터가 저장된다.
			웹브라우저의 입력양식과 Text 객체의 value는 sync가 된다.
			만약 자바스크립트코딩으로 Text객체에 접근해서 value 속성변수 안에 데이터를 입력하면 웹브라우저의 입력양식에도 나타난다.
	Text객체가 DOM 객체 중 하나이다.
	----------------------------------
	
----------------------------------
BOM 객체
	브라우저 제작사 별로 자체 제작한 객체를 말한다.
	주로 페이지 이동, 모니터 정보 관리, 새 웹브라우저 화면 띄우기, 방문한 URL 주소 관리, 웹브라우저 종류/버전 관리, 이벤트 관리 등기능
	예) BOM 객체 중에 Location 객체의 replace라는 메소드를 호출하여 페이지 이동하기
	location.replace("URL주소")
		location 변수 안에 Location 객체의 메위주가 들어있다.
		location 변수는 웹브라우저가 만들어서 제공하는 변수이다.
		<주의>브라우저 제작사 별로 만든 [클래스]로 부터 만들어진 [객체]이므로
		 한번 작성된 BOM 객체 메소드나 속성변수 호출 코딩은
		 브라우저 종류별이나 버전별로 동일한 결과를 생성하지 못하거나 오류가 발생하기도 한다.

----------------------------------
자바스크립트 내장 객체
	자바스크립트 차원에서 미리 만들어 저장된 [생성자 함수]로부터 만들어지는 객체를 말한다.
	각종 데이터를 생산/관리한다.
	
	예) 지금 순간의 연도를 thisYear라는 변수에 저장하고 싶다면 아래 처럼 Date 객체를 생성하고 getFullYear 메소드를 호출한다.
		var today = new Date();
		var thisYear = today.getFullYear();
	예) 다량의 변수를 저장하고 관리하고 싶다면 아래처럼 Array 객체를 생성하면 된다.
		var students = new Array();
		students.push("한승태");
		students.push("이성우");
		students.push("김영진");
----------------------------------
자바스크립트 사용자 정의 객체
	자바스크립트 문법에 맞춰 개발자가 직접 만들어 저장한 [생성자 함수]로부터 만들어지는 객체를 말한다.
	[생성자 함수]는 일반 함수와는 달리 객체의 전신으로써 속성변수와 메소드가 선언되어 있다.
	저자에 따라 [생성자 함수]를 클래스라고 부르기도 한다.
	자바스크립트 사용자 정의 객체는 주로 웹 관련 솔루션에서 만들어 사용한다.
----------------------------------
JQuery 객체
특정 단체에서 만들어 무료로 제작,배포하는 사용자 정의 객체 중의 하나.
	----------------------------------
	장점
		대부분의 브라우저에서 동일한 실행 결과를 얻을 수 있다.(=크로스 브라우징=cross browsing)
		개발자, 디자이너, 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
		짧은 코딩으로 원하는 일을 쉽게 처리한다.
	단점	
		정해진 코딩 패턴이 없다. 개발자마다 다양한 코딩을 할 수 있어서 유지,보수가 힘들다.
		힘들기 때문에 요즘은 react를 더 많이 사용한다.
		<참고> react 이후에 Vue가 사용될 것 같다.
		<참고> react : 자바스크립트로 화면 UI를 만들 수 있는 플랫폼
				node.JS를 기반으로 작동된다.
				퍼즐 맞추듯이 미리 만든 조각들을 모아 화면을 구성하므로 코딩의 재사용성이 좋고
				일정한 코딩 패턴으로 유지보수성이 좋다
				웹브라우저에 부하를 적게 준다.
	----------------------------------
	기능
	
	개발자 원하는 강력한 기능을 지원한다.
		DOM 객체를 쉽게 컨트롤 할 수 있어 컨텐츠의 추가/수정/삭제가 쉽다.
		비동기 방식으로 서버와 통신을 지원한다.
		애니메이션 관련 작업을 지원한다.
		[이벤트] 설정 및 처리를 지원한다. 등등
	사용방법
		웹브라우저에 기본적으로 내장되지 않았음으로 import해야 한다.
		온라인 상에서 무료로 제공하는 [jquery-xxx.js] 파일을 다운로드한 후 html 파일 안에서 아래 처럼 import해야 한다.
		<script scr = "jquery-xxx.js"></script>
	----------------------------------
	JQuery 객체 생성하고 JQuery 객체의 메주위 값을 얻는 방법
		var 변수명 = $("태그를지칭하는선택자");
		----------------------------------
		변수명.JQuery객체메소드	
		----------------------------------
		변수명.JQuery객체속성변수	
		----------------------------------
----------------------------------
------------------------------------------------------------------------
■16■ 자바스크립트 내장 객체의 종류와 메소드/속성변수 정리
------------------------------------------------------------------------
----------------------------------
Array객체
----------------------------------
	다량의 데이터 저장하고 관리하는 객체이다.
	같은 유형 또는 다른 유형의 다수 데이터를 [순차적]으로 저장하여 관리하는 내장 객체이다.
	저장되는 데이터는 [배열변수]라는 곳에 저장된다.
	Array 객체의 생성하고 데이터 저장 방법
		----------------------------------
		방법1) 
			var 객참변수 = new Array(데이터1, ~, 데이터n);
	***	방법2)
			var 변수 = new Array();
			변수명.push(데이터1);
			변수명.push(데이터2);
		방법3)
			var 변수명 = new Array();
			변수명[0] = 데이터1;
			변수명[1] = 데이터2;
	***	방법4)
			var 변수명 = [데이터1, ~, 데이터n];
	***	방법5)
			var 변수명 = [];
			변수명.push(데이터1);
			변수명.push(데이터2);
	Array 객체의 메소드 종류
		----------------------------------
		push(데이터) => Array 객체안에 마지막에 배열 변수를 만들고 그 배열 변수에 데이터 저장하기
		----------------------------------
		join("연결문자") => Array 객체가 소유한 모든 저장 데이터를 연결 문자로 연결하여 문자열로 리턴
			var xxx = [1, 2, 3]; var yyy = xxx.join(" ");
		----------------------------------
		reverse() => 배열변수 안의 데이터의 순서를 거꾸로 뒤집음
		----------------------------------
		pop()	=> 마지막 배열변수안의 데이터를 리턴하고 마지막 배열변수를 제거함. 오려내기.
		----------------------------------
		concat(다른Array객체)  => .호출한 Array객체와 괄호안의 Array객체의 배열변수를 복사해서 새로운 Array 객체 안에 저장하고 리턴 
		----------------------------------
		sort()  => 저장된 데이터를 문자열 취급해 오릅차순 정렬. 숫자가 아닌 문자가 되어 있을 때 정렬 시 사용하는 메소드이다.
				var kors = [3, 20, 10]; kors.sort();	// 정렬분서는 10, 20, 3
				var names = ["김소희", "성이현", "변희원"]; kors.sort();		//정렬순서는 "김소희" "변희원" "성이현"
		----------------------------------
		sort( function(left,right){return left-right;} )
		저장된 숫자 데이터를 오름차순 정렬
			예)var kors = [3,20,10]; kors.sort(function(left,right){return left-right;}) ;   
							// 정렬순서는 3 10 20 이다.
		sort( function(left,right){return right-left;} )
		저장된 숫자 데이터를 내름차순 정렬	
			예) var kors = [3,20,10]; kors.sort(function(left,right){return right-left;}) ;
							//정렬순서는 20 10 3 이다.
		----------------------------------
		slice( 시작인덱스번호, 끝인덱스다음번호) ex) 2이면 3을 넣어야 2까지 복사된다.
			시작인덱스번호부터 끝인덱스다음번호 [이전]까지 복사해서 새로운 Array 객체로 리턴
		----------------------------------
		splice( 시작인덱스번호, 개수)
			시작 인덱스번호부터 개수만큼 오려내서 새로운 Array 객체로 리턴
		----------------------------------

	Array 객체의 속성변수
		----------------------------------
		length		=> 배열변수의 개수
		----------------------------------
----------------------------------
Date 객체
----------------------------------
	년월일요일시분초를 관리하는 객체
	----------------------------------
	객체 생성, 메소드 호출, 속성변수 호출방법
	----------------------------------
		객체 생성 => var 변수명 = new Date(년, 월-1, 일, 시, 분, 초)
		----------------------------------
		매소드 호출 => 객참변수.메소드(~)
		----------------------------------
		<주의> 년, 월-1, 일, 시, 분, 초 를 세팅하지 않으면 현재 시스템 날짜가 세팅된다.
		<주의> 년, 월-1, 일만 세팅하면 시, 분, 초는 0,0,0이 세팅된다.
		<주의> Date 객체는 월을 0~11까지의 숫자로 관리하므로 항상 세팅 시 월은 -1 한 다음 입력한다.
	----------------------------------
	Date 객체의 메소드
	----------------------------------
		getFullYear()	=> Date 객체에 세팅된 연도를 리턴.
		getMonth()	=> Date 객체에 세팅된 월(0~11)을 리턴.
		getDate()	=> Date 객체에 세팅된 일(1~31)을 리턴.
		getDay()	=> Date 객체에 세팅된 요일(0(일) ~ 6)토)를 리턴.
		getHours()	=> Date 객체에 세팅된 시간(0~23)을 리턴.
		getMinutes()	=> Date 객체에 세팅된 분(0~59)을 리턴.
		getSeconds()	=> Date 객체에 세팅된 초(0~59)을 리턴.
		getTime()	=> [1970년1월1일 0시, 0분, 0초] ~ [Date 객체의 기억날짜] 까지의 차이를 초*1000 으로 리턴.
					주 용도는 날짜의 차이를 구할 때 사용하는 메소드이다.
					----------------------------------
					1999.1.11부터 2021.7.7일까지의 차이를 초로 구하면?
					var date1 = new Date(1999, 0, 11);
					var date2 = new Date(2021, 6, 7);
					var interval = (date2.getTime() - date1.getTime())/1000;
	----------------------------------
		setFullYear(년도) => Date 객체에 연도를 세팅한다
		setMonth(월-1 )   => Date 객체에 월을 세팅한다
		setDate(일 )      => Date 객체에 일을 세팅한다
		setHours(시 )     => Date 객체에 시를 세팅한다
		setMinutes(분 )   => Date 객체에 분을 세팅한다
		setSeconds(초 )   => Date 객체에 초를 세팅한다
	----------------------------------
	Date 객체의 예제
	----------------------------------
		현재 날짜의 년월일을 구해 변수 year, month, date에 저장하기
		var today = new Date();
		var year = today.getFullYear();
		var month = today.getMonth()+1;
		var date = today.getDate();
	----------------------------------
	현재 부터 올해 크리스마스날까지 며칠 남았는지 구해서 변수 interval 저장하기?
	var today = new Date();
	var christmas_day = new Date(today.getFullYear(), 11, 25);
	var interval = (christmas_day.getTime() - today.getTime())/1000/(60*60*24);
	----------------------------------
	2031년 2월 달의 마지막 일을 구해 변수 xxx에 저장하기
	var xxx_day = new Date(2031, 2, 0);
	var last_day = xxx_day.getDate();	
	
	----------------------------------
	var xxx_day = new Date();
	xxx_day.setDate(xxx_day.getDate()+1000);
	var year = xxx_day.getFullYear();
	var month = xxx_day.getMonth()+1;
	var date = xxx_day.getDate();
	----------------------------------
	현재 지금 날짜에서 요일을 얻어서 변수 week에 저장. 단 요일은 한글로 저장
	var today = new Date();
	var week = today.getDay();
	if(week==0){week = "일요일"} 
	else if(week==1){week = "월요일"}
	else if(week==2){week = "화요일"}
	else if(week==3){week = "수요일"}
	else if(week==4){week = "목요일"}
	else if(week==5){week = "금요일"}
	else (week==6){week = "토요일"}
	----------------------------------
	자바
	
	String uname = "성이현";
	if( uname.equals("성이현")==true){
	//if( uname == "성이현")
		System.out.print("");
	}
	결과는 주석도 true가 나오지만 주석처럼 사용하면 안된다
	메모리 위치 주소 값을 동일하게 참조해서 true이지
	"성이현"이 동일해서 true가 나온게 아니다.
	반드시 equals를 사용해야 한다.
	----------------------------------
	
	var uname = "성이현"
	if( uname == "성이현"){
		alert("");
	}
----------------------------------
String 객체
----------------------------------
[문자열]을 관리하는 객체이다.
----------------------------------
String 객체 생성, 메소드/속성변수 호출 방법
	String 객체 생성 		=> var 변수명 = "문자열"; 또는 var 변수명 = new String("문자열");
	String 객체 메소드/속성변수 호출 => 변수명, 메소드(~)	변수명.속성변수
	----------------------------------
	String 객체의 속성변수
	----------------------------------
	length()
		String 객체가 소유한 문자열의 길이를 리턴.
	----------------------------------
	----------------------------------
	String 객체의 메소드
	----------------------------------
		charAt(인덱스번호)
			인덱스번호에 위치하는 문자 하나를 복사해서 리턴, 인덱스번호는 0부터 시작한다.
			var uname ="성이현"; var fistName= uname.charAt(0);
	----------------------------------
		concat("문자열")
			String 객체가 소유한 문자열 복사해 [더할문자열]을 연결하여 문자열로 새로운 String 객체로 리턴.
	----------------------------------
		indexof("찾는문자", 검색시작인덱스번호) *****
			String 객체가 소유한 문자열에서 찾는 문자가 위치한 곳의 인덱스 번호를 리턴.
			단, 검색 시작은 검색시작인덱스번호부터 검색한다.
			리턴 값이 -1이면 찾는 문자가 존재하지 않는다.
	----------------------------------
		----------------------------------
		var name ="박세리"; 에서 uname 저장된 이름이 성씨가 박이면 xxx변수에 "박씨가문"저장하기
			var uname ="박세리";
			if(uname.indexOf("박")==0){
			var xxx = "박씨가문"
		}
		----------------------------------
		var fruit="수박 참외 파인애플 복숭아";에 복숭아가 있으면 xxx변수에 "있음"저장하기
		
		var fruit="수박 참외 파인애플 복숭아";
		if(fruit.indexOf("복숭아")>=0{
			var xxx = "있음";
		}
		----------------------------------
	----------------------------------
	lastIndexof("찾는문자", 검색시작인덱스번호)
		String 객체가 소유한 문자열에서 "찾는문자"가 위치한 곳의 인덱스 번호를 리턴.
		검색 시작점은 검색시작인덱스번호로부터 검색한다.
		검색 방향은 오른쪽에서 왼쪽으로 검색한다. 앞에서부터 검색한다.
	----------------------------------
	replace("찾는문자", "대체문자")
	----------------------------------
		String 객체가 소유한 문자열 복사해 [찾는문자]를 [바꿀문자]로 대체하여 리턴.
		단 처음 나오는 것만 바꿈.
	----------------------------------
	substr(인덱스번호, 개수) *****
	----------------------------------
		인덱스번호부터 지정개수만큼 문자열을 복사해 리턴.
	----------------------------------
	substring(시작인덱스번호, 끝인덱스번호) *****
	----------------------------------
		시작인덱스번호 붙어 끝인덱스번호 이전 까지 문자열을 복사해 리턴.
	----------------------------------
	split("분리문자") ***
	----------------------------------
		String 객체가 소유한 문자열 복사해 분리문자로 문자열을 분리해서
		Array 객체에 저장하여 Array 객체를 리턴.
	----------------------------------
	toLowerCase()
	----------------------------------
		String 객체가 소유한 문자열 복사해 소문자로 바꾸어 리턴.
	----------------------------------
	toUpperCase()
		String 객체가 소유한 문자열 복사해 대문자로 바꾸어 리턴.
	----------------------------------
	trim() *****
		String 객체가 소유한 문자열 복사해 문자열의 앞뒤 [공백]을 제거한 문자열을 리턴.
		<주의>Explorer 는 Explorer9 부터 지원함.
	----------------------------------
	match("찾는문자")
	----------------------------------
		String 객체가 소유한 문자열 내에 [찾는문자]가 있으면 [찾는문자] 복사해서 리턴 없으면 null 리턴.
	----------------------------------
	기타 등
	----------------------------------
	아이디 "abc123" 가 있다. 첫글자는 영문 소문자, 숫자와 영문 소문자로 구성돼야하고
	길이가 5개 이상이면 "적합" 이라는 문자를 result 변수에 저장
	위 조건을 만족하지 못하면 "부적합" 이라는 문자를 result 변수에 저장하기
	var uid = "abc123";
	var alpahbet = "abcdefghijklmnopqrstuvwxyz"
	var num = "0123456789"
	var cnt = 0;
	var result = "적합";
	
	//아이디 첫글자 영문 소문자 아니면 1 업데이트
	if(alphabet.indexOf(uid.charAt(0))<0){	cnt++;
	}
	----------------------------------
	//아이디 길이가 5 미만이면 cnt 변수 1업데이트
	if(uid.length<5){cnt++;
	}
	----------------------------------
	//아이디가 숫자와 영문소문자로 구성되어있지 않으면 cnt 변수 1 업데이트
	for(var i=0 ; i<uid.length; i++){
		var str = uid.charAt(i);
		if(alphabet.indexOf(str)<0 && num.indexOf(str)<0){
			cnt++; }
	}
	// 아이디가 조건에 안맞으면 xxx변수에 "부적합" 저장하기
	if(cnt>0){
		result = "부적합";}
----------------------------------
Math 객체
----------------------------------
	수학적 계산을 하는데 도움이 되는 메소드를 제공하는 객체이다.
	객체 생성, 메소드 호출, 속성변수 호출 방법
		객체 생성 => 객체 생성 코드 없음
		메소드 호출 => Math.메소드(~)
	----------------------------------
	Math 객체의 메소드
	----------------------------------
		ceil(v)
			v 값의 소수 첫째 자리를 올림해서 정수로 리턴
		----------------------------------
		floor(v) 
			v 값의 소수 첫째 자리를 버림해서 정수로 리턴
		----------------------------------
		round(v)
			v 값의 소수 첫째 자리를 반올림해서 정수로 리턴
		----------------------------------
		max(숫자1, ~, 숫자n)
			숫자 1부터 숫자 n까지 중 최대값을 리턴
		----------------------------------
		min(숫자1, ~, 숫자n)
			숫자 1부터 숫자 n까지 중 최소값을 리턴
		----------------------------------
		random()
			0이상 1미만의 무작위 실수를 리턴
		----------------------------------
		abs(x)
			x 값의 절대값을 리턴
		----------------------------------
		pow(x, y)
			x의 y승을 리턴 //pow(3,2) 3의2승
		----------------------------------
		log(x)
			로그 함수를 계산해서 리턴
		----------------------------------
		sin(x)	
			sin 값을 리턴
		----------------------------------
		cos(x)
			cos 값을 리턴
		----------------------------------
		tan(x)
			tan 값을 리턴
		----------------------------------
		기타 등
	----------------------------------
	Math 객체의 속성변수
	----------------------------------
		PI	=> 원주율 리턴
		E	=> 오일러 상수값을 리턴
		----------------------------------
		기타 등
----------------------------------
RegExp 객체
----------------------------------
	문자열의 패턴을 관리하는 객체이다. <참고> RegExp는 Regular Expression(정규 표현식)의 약어이다.
	객체 생성, 메소드 호출, 속성변수 호출 방법
		----------------------------------
		var 객참변수 = new RegExp(패턴식);
		----------------------------------
		var 객참변수 = 패턴식;
		<주의> 자바스크립트에서는 패턴식은 " 또는 '로 감싸지 않는다.
		----------------------------------
	메소드 호출, 속성변수 호출 방법
		----------------------------------
		객참변수.속성변수
		----------------------------------
		객참변수.메소드(~)
		----------------------------------
	RegExp 객체의 메소드
		----------------------------------
		test("문자열");
			문자열이 패턴식을 만족하면 true 리턴, 아니면 false 리턴
		----------------------------------
		// 변수 uid에 아이디 abc123 저장
		예) var uid = "abc123;"
		// RegExp 객체 생성해서 변수 regExp에 저장하기.
		// RegExp 객체가 관리하는 패턴식은 아래와 같다.
		// 첫글자는 영어소문자, 두번째부터는 영소문, 숫자, _로 하고 4~9자 사이로 반복하기 그리고 이런 패턴으로 끝나기
	  	    var regExp = new RegExp(/^[a-z][a-z0-9_]{4,9}$/);
		// RegExp 객체의 test 메소드를 호출하여 uid 변수 안의 데이터가 패턴식을 만족하면 true 아니면 false를 리턴하여 flag 변수에 저장
		    var flag = regExp.test(uid)
		----------------------------------
	패턴식 예)	
		핸드폰 번호 패턴식	=> /^(010|011|016|017|018|019)-[0-9]{3,4}-[0-9]{4}$/
		한글이름 2~20자		=> /^[가-힣]{2,20}$/
		"abc" 문자의 존재여부	=> /abc/
		" " 공백 존재		=> /[ ]+/
		email 형식		=> /^([0-9a-zA-z_-])@([0-9a-zA-Z_-]+)(＼.[09a-zA-Z_-]+){1,2}$/
		임의 문자 3개로만 구성	=> /^...&/
		abc로 시작하고 xyz로 끝남	=> /^(abc).*(xyz)$/
		-를 포함 또는 생략한 핸드폰 번호	=> /^(010|011|016|017|018|019)-{0,1}[0-9]{3,4}-{0,1}[0-9]{4}$/
						   /^(010|011|016|017|018|019)-?[0-9]{3,4}-?[0-9]{4}$/
						   /^01([0|1|6|7|8|9])-?[0-9]{3,4}-?[0-9]{4}$/
	패턴식 키워드
		----------------------------------
		^		=> ^의 오른쪽 문자가 시작임을 의미
		----------------------------------
		$		=> $의 왼쪽문자가 마지막임을 의미
		----------------------------------
		[문자열]		=> 문자열 중에 문자 하나
		----------------------------------
		[^문자열]	=> 문자열이 모두 아닌 문자 하나 [^abc] //a도 b도 c도 아닌 문자
		----------------------------------
		＼w		=> [a-zA-Z0-9_]과 동일, 영소문자 또는 영대문자 또는 숫자 또는 언더바 중에 하나
		----------------------------------
		＼d		=> [0-9]와 동일. 숫자 하나
		----------------------------------
		＼s		=> [ ] 공백
		----------------------------------
		----------------------------------
		＼W		=> ＼w가 아닌 것. [^a-zA-Z0-9]과 동일
		----------------------------------
		＼D		=> ＼d가 아닌 것. 숫자가 아닌 문자 하나
		----------------------------------
		＼S		=> ＼s가 아닌 것. 공백이 아닌 문자 하나
		----------------------------------
		----------------------------------
		＼/		=>  / 문자
		----------------------------------
		.		=> 임의의 문자 하나
		----------------------------------
		[.]		=> . 하나
		----------------------------------
		{n}		=> 왼쪽 데이터가 n개만 나옴
		----------------------------------
		{n,}		=> 왼쪽 데이터가 n개 이상 나옴
		----------------------------------
		{n, m}		=> 왼쪽 데이터가 n~m개 나옴
		----------------------------------
		*		=> 왼쪽 데이터가 0개 이상	[a-z]*	// 영소문자 0개 사이
		----------------------------------
		+		=> 왼쪽 데이터가 1개 이상	[a-z]+	// 영소문자 0개 사이
		----------------------------------
		?		=> 왼쪽 데이터가 0~1개		[a-z]?	// 영소문자 0~1개 사이
		----------------------------------
		|		=> | 좌우 문자열 중 하나 리턴
		----------------------------------
		()		=> 괄화안을 하나로 묶어서 관리(그룹화)












		메소드 등장시 암기사항
		1) 기능
		2) 메소드의 리턴값
		3) 매개변수로 넘기는 데이터가 무엇인지






































----------------------------------
a.html
----------------------------------
<html>
	<head>~</head>
<script>자바스크립트코드</script>
<body>
</body>
</html>
----------------------------------
b.html
----------------------------------
<html>
	<head>~</head>
<script>자바스크립트코드</script>
<body>
</body>
</html>











